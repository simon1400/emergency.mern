{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport thunk from 'redux-thunk';\nimport { createBrowserHistory, createMemoryHistory } from 'history';\nimport rootReducer from './modules'; // A nice helper to tell us if we're on the server\n\nexport var isServer = !(typeof window !== 'undefined' && window.document && window.document.createElement);\nexport default (function () {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n  // Create a history depending on the environment\n  var history = isServer ? createMemoryHistory({\n    initialEntries: [url]\n  }) : createBrowserHistory();\n  var enhancers = []; // Dev tools are helpful\n\n  if (process.env.NODE_ENV === 'development' && !isServer) {\n    var devToolsExtension = window.devToolsExtension;\n\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension());\n    }\n  }\n\n  var middleware = [thunk, routerMiddleware(history)];\n  var composedEnhancers = compose.apply(void 0, [applyMiddleware.apply(void 0, middleware)].concat(enhancers)); // Do we have preloaded state available? Great, save it.\n\n  var initialState = !isServer ? window.__PRELOADED_STATE__ : {}; // Delete it once we have it stored in a variable\n\n  if (!isServer) {\n    delete window.__PRELOADED_STATE__;\n  } // Create the store\n\n\n  var store = createStore(connectRouter(history)(rootReducer), initialState, composedEnhancers);\n  return {\n    store: store,\n    history: history\n  };\n});","map":{"version":3,"sources":["/Users/dmytropechunka/Desktop/main/projects/slavik/mern/src/store.js"],"names":["createStore","applyMiddleware","compose","connectRouter","routerMiddleware","thunk","createBrowserHistory","createMemoryHistory","rootReducer","isServer","window","document","createElement","url","history","initialEntries","enhancers","process","env","NODE_ENV","devToolsExtension","push","middleware","composedEnhancers","initialState","__PRELOADED_STATE__","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,SAA1D;AACA,OAAOC,WAAP,MAAwB,WAAxB,C,CAEA;;AACA,OAAO,IAAMC,QAAQ,GAAG,EACtB,OAAOC,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACC,QADP,IAEAD,MAAM,CAACC,QAAP,CAAgBC,aAHM,CAAjB;AAMP,gBAAe,YAAe;AAAA,MAAdC,GAAc,uEAAR,GAAQ;AAC5B;AACA,MAAMC,OAAO,GAAGL,QAAQ,GACpBF,mBAAmB,CAAC;AAClBQ,IAAAA,cAAc,EAAE,CAACF,GAAD;AADE,GAAD,CADC,GAIpBP,oBAAoB,EAJxB;AAMA,MAAMU,SAAS,GAAG,EAAlB,CAR4B,CAU5B;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0C,CAACV,QAA/C,EAAyD;AACvD,QAAMW,iBAAiB,GAAGV,MAAM,CAACU,iBAAjC;;AAEA,QAAI,OAAOA,iBAAP,KAA6B,UAAjC,EAA6C;AAC3CJ,MAAAA,SAAS,CAACK,IAAV,CAAeD,iBAAiB,EAAhC;AACD;AACF;;AAED,MAAME,UAAU,GAAG,CAACjB,KAAD,EAAQD,gBAAgB,CAACU,OAAD,CAAxB,CAAnB;AACA,MAAMS,iBAAiB,GAAGrB,OAAO,MAAP,UACxBD,eAAe,MAAf,SAAmBqB,UAAnB,CADwB,SAErBN,SAFqB,EAA1B,CApB4B,CAyB5B;;AACA,MAAMQ,YAAY,GAAG,CAACf,QAAD,GAAYC,MAAM,CAACe,mBAAnB,GAAyC,EAA9D,CA1B4B,CA4B5B;;AACA,MAAI,CAAChB,QAAL,EAAe;AACb,WAAOC,MAAM,CAACe,mBAAd;AACD,GA/B2B,CAiC5B;;;AACA,MAAMC,KAAK,GAAG1B,WAAW,CACvBG,aAAa,CAACW,OAAD,CAAb,CAAuBN,WAAvB,CADuB,EAEvBgB,YAFuB,EAGvBD,iBAHuB,CAAzB;AAMA,SAAO;AACLG,IAAAA,KAAK,EAALA,KADK;AAELZ,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CA5CD","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport thunk from 'redux-thunk';\nimport { createBrowserHistory, createMemoryHistory } from 'history';\nimport rootReducer from './modules';\n\n// A nice helper to tell us if we're on the server\nexport const isServer = !(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport default (url = '/') => {\n  // Create a history depending on the environment\n  const history = isServer\n    ? createMemoryHistory({\n        initialEntries: [url]\n      })\n    : createBrowserHistory();\n\n  const enhancers = [];\n\n  // Dev tools are helpful\n  if (process.env.NODE_ENV === 'development' && !isServer) {\n    const devToolsExtension = window.devToolsExtension;\n\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension());\n    }\n  }\n\n  const middleware = [thunk, routerMiddleware(history)];\n  const composedEnhancers = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n  );\n\n  // Do we have preloaded state available? Great, save it.\n  const initialState = !isServer ? window.__PRELOADED_STATE__ : {};\n\n  // Delete it once we have it stored in a variable\n  if (!isServer) {\n    delete window.__PRELOADED_STATE__;\n  }\n\n  // Create the store\n  const store = createStore(\n    connectRouter(history)(rootReducer),\n    initialState,\n    composedEnhancers\n  );\n\n  return {\n    store,\n    history\n  };\n};\n"]},"metadata":{},"sourceType":"module"}