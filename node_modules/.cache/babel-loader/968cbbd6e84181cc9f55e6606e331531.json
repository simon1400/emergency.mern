{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.frontloadConnect = exports.Frontload = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.frontloadServerRender = frontloadServerRender;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar autoDetectIsServer = function autoDetectIsServer() {\n  return typeof window === 'undefined' || !window.document || !window.document.createElement;\n};\n\nvar IS_SERVER = autoDetectIsServer();\nvar SERVER_FRONTLOAD_QUEUE = [];\nvar LIFECYCLE_PHASES = {\n  MOUNT: 0,\n  UPDATE: 1\n};\n\nvar log = process.env.NODE_ENV !== 'production' && function (name, message) {\n  console.log('[react-frontload]' + (name ? ' [' + name + ']' : '') + ' ' + message);\n};\n\nvar map = function map(arr, fn) {\n  var mapped = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    mapped.push(fn(arr[i], i));\n  }\n\n  return mapped;\n};\n\nvar waitForAllToComplete = function waitForAllToComplete(promises) {\n  return Promise.all(map(promises, function (promise) {\n    return promise['catch'](function (error) {\n      return error;\n    });\n  }));\n};\n\nvar Frontload = exports.Frontload = function (_React$Component) {\n  _inherits(Frontload, _React$Component);\n\n  _createClass(Frontload, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      var _this2 = this;\n\n      return {\n        frontload: {\n          isServer: this.isServer,\n          firstClientRenderDone: this.isServer ? true : this.firstClientRenderDone,\n          pushFrontload: function pushFrontload(frontload, options, lifecylePhase, childProps, logMessage) {\n            var isMount = lifecylePhase === LIFECYCLE_PHASES.MOUNT;\n            var isUpdate = lifecylePhase === LIFECYCLE_PHASES.UPDATE;\n            var noServerRender = _this2.props.noServerRender || options.noServerRender;\n\n            if (_this2.isServer && noServerRender || isMount && options.onMount === false || isUpdate && !options.onUpdate) {\n              return;\n            }\n\n            if (_this2.isServer) {\n              SERVER_FRONTLOAD_QUEUE.unshift({\n                fn: function fn() {\n                  return frontload(childProps, {\n                    isMount: isMount,\n                    isUpdate: isUpdate\n                  });\n                },\n                options: options,\n                componentDisplayName: childProps.displayName\n              });\n\n              if (process.env.NODE_ENV !== 'production' && _this2.props.withLogging && logMessage) {\n                log(_this2.props.name, 'added frontload fn to queue ' + logMessage);\n              }\n            } else if (noServerRender || _this2.firstClientRenderDone) {\n              frontload(childProps, {\n                isMount: isMount,\n                isUpdate: isUpdate\n              });\n\n              if (process.env.NODE_ENV !== 'production' && _this2.props.withLogging && logMessage) {\n                log(_this2.props.name, 'executed frontload fn ' + logMessage);\n              }\n            } else if (process.env.NODE_ENV !== 'production' && _this2.props.withLogging && logMessage) {\n              log(_this2.props.name, 'did not execute frontload fn on first client render ' + logMessage + ', since server rendering is enabled');\n            }\n          }\n        }\n      };\n    }\n  }]);\n\n  function Frontload(props, context) {\n    _classCallCheck(this, Frontload);\n\n    var _this = _possibleConstructorReturn(this, (Frontload.__proto__ || Object.getPrototypeOf(Frontload)).call(this, props, context));\n\n    _this.isServer = props.isServer === undefined ? IS_SERVER : props.isServer;\n\n    _this.componentDidMount = function () {\n      _this.firstClientRenderDone = true;\n\n      if (process.env.NODE_ENV !== 'production' && props.withLogging && !props.noServerRender) {\n        log(props.name, '1st client render done, from now on all frontloads will run');\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Frontload, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.Children.only(this.props.children);\n    }\n  }]);\n\n  return Frontload;\n}(_react2.default.Component);\n\nFrontload.childContextTypes = {\n  frontload: _propTypes2.default.object\n};\n\nvar FrontloadConnectedComponent = function (_React$Component2) {\n  _inherits(FrontloadConnectedComponent, _React$Component2);\n\n  function FrontloadConnectedComponent(props, context) {\n    _classCallCheck(this, FrontloadConnectedComponent);\n\n    var _this3 = _possibleConstructorReturn(this, (FrontloadConnectedComponent.__proto__ || Object.getPrototypeOf(FrontloadConnectedComponent)).call(this, props, context));\n\n    _this3.pushFrontload = function (lifecyclePhase, isServer) {\n      return function () {\n        var logMessage = process.env.NODE_ENV !== 'production' ? null : 'for component: [' + (_this3.props.component.displayName || 'anonymous') + '] on [' + (lifecyclePhase === LIFECYCLE_PHASES.MOUNT ? 'mount' : 'update') + ']';\n\n        _this3.context.frontload.pushFrontload(_this3.props.frontload, _this3.props.options, lifecyclePhase, _this3.props.componentProps, logMessage);\n      };\n    };\n\n    if (context.frontload.isServer) {\n      _this3.componentWillMount = _this3.pushFrontload(LIFECYCLE_PHASES.MOUNT, true);\n    } else {\n      _this3.componentDidMount = _this3.pushFrontload(LIFECYCLE_PHASES.MOUNT);\n      _this3.componentDidUpdate = _this3.pushFrontload(LIFECYCLE_PHASES.UPDATE);\n    }\n\n    return _this3;\n  }\n\n  _createClass(FrontloadConnectedComponent, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(this.props.component, this.props.componentProps);\n    }\n  }]);\n\n  return FrontloadConnectedComponent;\n}(_react2.default.Component);\n\nFrontloadConnectedComponent.contextTypes = {\n  frontload: _propTypes2.default.object\n};\n\nvar frontloadConnect = exports.frontloadConnect = function frontloadConnect(frontload) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (component) {\n    return function (props) {\n      return _react2.default.createElement(FrontloadConnectedComponent, {\n        frontload: frontload,\n        component: component,\n        componentProps: props,\n        options: options\n      });\n    };\n  };\n};\n\nfunction dryRunRender(renderFunction) {\n  renderFunction(true);\n  var frontloadsFromRender = SERVER_FRONTLOAD_QUEUE;\n  SERVER_FRONTLOAD_QUEUE = [];\n  return frontloadsFromRender;\n}\n\nfunction runAllFrontloads(frontloads) {\n  return waitForAllToComplete(map(frontloads, function (frontload) {\n    return frontload.fn();\n  }));\n}\n\nfunction finalRender(renderFunction) {\n  var renderOutput = renderFunction(false);\n  SERVER_FRONTLOAD_QUEUE = [];\n  return renderOutput;\n}\n\nfunction frontloadServerRenderWorker(render, _ref) {\n  var withLogging = _ref.withLogging,\n      maxNestedFrontloadComponents = _ref.maxNestedFrontloadComponents;\n  var renderNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var frontloadsInLastRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (process.env.NODE_ENV !== 'production' && withLogging) {\n    log('frontloadServerRender info', 'running render pass ' + renderNumber);\n  }\n\n  var frontloadsFromRender = dryRunRender(render);\n  var frontloadsInThisRender = frontloadsFromRender.length + 0;\n  var newFrontloadsInThisRender = frontloadsInThisRender - frontloadsInLastRender;\n\n  if (process.env.NODE_ENV !== 'production' && withLogging) {\n    log('frontloadServerRender info', 'render pass ' + renderNumber + ' - total frontloads count ' + newFrontloadsInThisRender);\n  }\n\n  if (!newFrontloadsInThisRender) {\n    if (process.env.NODE_ENV !== 'production' && withLogging) {\n      log('frontloadServerRender info', 'after running ' + renderNumber + ' render passes (of max ' + maxNestedFrontloadComponents + ' allowed) no frontload components remain to render, so running final render.');\n    }\n\n    var finalRenderOutput = finalRender(render);\n\n    if (process.env.NODE_ENV !== 'production' && withLogging) {\n      log('frontloadServerRender info', 'NOTE: as the logs show, the queue(s) are filled by Frontload on final render, however they are NOT flushed, so the frontload functions DO NOT run unnecessarily on final render.');\n      log('frontloadServerRender info', 'final render succeeded. Server rendering is done.');\n    }\n\n    return Promise.resolve(finalRenderOutput);\n  }\n\n  if (process.env.NODE_ENV !== 'production' && withLogging) {\n    log('frontloadServerRender info', frontloadsInThisRender + ' frontloads (' + newFrontloadsInThisRender + ' new) to run in render pass ' + renderNumber);\n  }\n\n  var startRunAllFrontloadsAt = withLogging && Date.now();\n  return runAllFrontloads(frontloadsFromRender).then(function () {\n    if (process.env.NODE_ENV !== 'production' && withLogging) {\n      log('frontloadServerRender info', 'render pass ' + renderNumber + ' - ran ' + frontloadsInThisRender + ' frontloads (' + newFrontloadsInThisRender + ' new) in ' + (Date.now() - startRunAllFrontloadsAt) + 'ms');\n    }\n\n    if (renderNumber === maxNestedFrontloadComponents) {\n      var incompleteRenderOutput = render(false);\n      var frontloadsFromFinalRenderPass = SERVER_FRONTLOAD_QUEUE.length + 0;\n      var frontloadsLeftToRun = frontloadsFromFinalRenderPass - frontloadsInThisRender;\n      SERVER_FRONTLOAD_QUEUE = [];\n\n      if (process.env.NODE_ENV !== 'production' && withLogging && frontloadsLeftToRun > 0) {\n        log('frontloadServerRender WARNING', 'maxNestedFrontloadComponents (' + maxNestedFrontloadComponents + ') option in frontloadServerRender has been reached, ' + ('yet there are still ' + frontloadsLeftToRun + ' frontload child components to render. ') + 'I.e. you have more levels of nesting in your app than your configuration allows. ' + 'Server rendering will halt here and return the partially loaded result, which you probably don\\'t want. ' + 'To fix this, either increase the levels of nesting allowed, or restructure your app so that it has fewer levels ' + 'of nested frontload components.');\n        log('frontloadServerRender info', 'NOTE: as the logs show, the queue(s) are filled by the extra render pass that was one over maxNestedFrontloadComponents (' + maxNestedFrontloadComponents + '), ' + 'however they are NOT flushed, so the frontload functions DO NOT actually run.');\n      }\n\n      return incompleteRenderOutput;\n    }\n\n    return frontloadServerRenderWorker(render, {\n      withLogging: withLogging,\n      maxNestedFrontloadComponents: maxNestedFrontloadComponents\n    }, renderNumber + 1, frontloadsInThisRender);\n  });\n}\n\nfunction frontloadServerRender(render) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!options.maxNestedFrontloadComponents) {\n    options.maxNestedFrontloadComponents = 1;\n  }\n\n  return frontloadServerRenderWorker(render, options);\n}","map":null,"metadata":{},"sourceType":"script"}