{"ast":null,"code":"import _objectWithoutProperties from \"/Users/dmytropechunka/Desktop/main/projects/slavik/mern/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/dmytropechunka/Desktop/main/projects/slavik/mern/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dmytropechunka/Desktop/main/projects/slavik/mern/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dmytropechunka/Desktop/main/projects/slavik/mern/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dmytropechunka/Desktop/main/projects/slavik/mern/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dmytropechunka/Desktop/main/projects/slavik/mern/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dmytropechunka/Desktop/main/projects/slavik/mern/src/app/components/page/index.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport Helmet from \"react-helmet\"; // import logo from \"../../assets/logo.jpg\";\n\nvar SITE_URL = process.env.NODE_ENV === \"development\" ? \"https://localhost:3000\" : \"https://cra-ssr.herokuapp.com\";\nvar FACEBOOK_APP_ID = \"XXXXXXXXX\";\nvar defaultTitle = \"Dotaznik\";\nvar defaultDescription = \"Dímův dotázník\"; // const defaultImage = `${SITE_URL}${logo}`;\n\nvar defaultTwitter = \"@cereallarceny\";\nvar defaultSep = \" | \";\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  function Page() {\n    _classCallCheck(this, Page);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Page).apply(this, arguments));\n  }\n\n  _createClass(Page, [{\n    key: \"getMetaTags\",\n    value: function getMetaTags(_ref, pathname) {\n      var title = _ref.title,\n          description = _ref.description,\n          image = _ref.image,\n          contentType = _ref.contentType,\n          twitter = _ref.twitter,\n          noCrawl = _ref.noCrawl,\n          published = _ref.published,\n          updated = _ref.updated,\n          category = _ref.category,\n          tags = _ref.tags;\n      var theTitle = title ? (title + defaultSep + defaultTitle).substring(0, 60) : defaultTitle;\n      var theDescription = description ? description.substring(0, 155) : defaultDescription; // const theImage = image ? `${SITE_URL}${image}` : defaultImage;\n\n      var metaTags = [{\n        itemprop: \"name\",\n        content: theTitle\n      }, {\n        itemprop: \"description\",\n        content: theDescription\n      }, // { itemprop: \"image\", content: theImage },\n      {\n        name: \"description\",\n        content: theDescription\n      }, {\n        name: \"twitter:card\",\n        content: \"summary_large_image\"\n      }, {\n        name: \"twitter:site\",\n        content: defaultTwitter\n      }, {\n        name: \"twitter:title\",\n        content: theTitle\n      }, {\n        name: \"twitter:description\",\n        content: theDescription\n      }, {\n        name: \"twitter:creator\",\n        content: twitter || defaultTwitter\n      }, // { name: \"twitter:image:src\", content: theImage },\n      {\n        property: \"og:title\",\n        content: theTitle\n      }, {\n        property: \"og:type\",\n        content: contentType || \"website\"\n      }, {\n        property: \"og:url\",\n        content: SITE_URL + pathname\n      }, // { property: \"og:image\", content: theImage },\n      {\n        property: \"og:description\",\n        content: theDescription\n      }, {\n        property: \"og:site_name\",\n        content: defaultTitle\n      }, {\n        property: \"fb:app_id\",\n        content: FACEBOOK_APP_ID\n      }];\n\n      if (noCrawl) {\n        metaTags.push({\n          name: \"robots\",\n          content: \"noindex, nofollow\"\n        });\n      }\n\n      if (published) {\n        metaTags.push({\n          name: \"article:published_time\",\n          content: published\n        });\n      }\n\n      if (updated) {\n        metaTags.push({\n          name: \"article:modified_time\",\n          content: updated\n        });\n      }\n\n      if (category) {\n        metaTags.push({\n          name: \"article:section\",\n          content: category\n        });\n      }\n\n      if (tags) {\n        metaTags.push({\n          name: \"article:tag\",\n          content: tags\n        });\n      }\n\n      return metaTags;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          id = _this$props.id,\n          className = _this$props.className,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"id\", \"className\"]);\n\n      return React.createElement(\"main\", {\n        id: id,\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Helmet, {\n        htmlAttributes: {\n          lang: \"en\",\n          itemscope: undefined,\n          itemtype: \"https://schema.org/\".concat(rest.schema || \"WebPage\")\n        },\n        title: rest.title ? rest.title + defaultSep + defaultTitle : defaultTitle,\n        link: [{\n          rel: \"canonical\",\n          href: SITE_URL + this.props.location.pathname\n        }],\n        meta: this.getMetaTags(rest, this.props.location.pathname),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), children);\n    }\n  }]);\n\n  return Page;\n}(Component);\n\nexport default withRouter(Page);","map":{"version":3,"sources":["/Users/dmytropechunka/Desktop/main/projects/slavik/mern/src/app/components/page/index.js"],"names":["React","Component","withRouter","Helmet","SITE_URL","process","env","NODE_ENV","FACEBOOK_APP_ID","defaultTitle","defaultDescription","defaultTwitter","defaultSep","Page","pathname","title","description","image","contentType","twitter","noCrawl","published","updated","category","tags","theTitle","substring","theDescription","metaTags","itemprop","content","name","property","push","props","children","id","className","rest","lang","itemscope","undefined","itemtype","schema","rel","href","location","getMetaTags"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport Helmet from \"react-helmet\";\n// import logo from \"../../assets/logo.jpg\";\n\nconst SITE_URL =\n  process.env.NODE_ENV === \"development\"\n    ? \"https://localhost:3000\"\n    : \"https://cra-ssr.herokuapp.com\";\n\nconst FACEBOOK_APP_ID = \"XXXXXXXXX\";\n\nconst defaultTitle = \"Dotaznik\";\nconst defaultDescription = \"Dímův dotázník\";\n// const defaultImage = `${SITE_URL}${logo}`;\nconst defaultTwitter = \"@cereallarceny\";\nconst defaultSep = \" | \";\n\nclass Page extends Component {\n  getMetaTags(\n    {\n      title,\n      description,\n      image,\n      contentType,\n      twitter,\n      noCrawl,\n      published,\n      updated,\n      category,\n      tags\n    },\n    pathname\n  ) {\n    const theTitle = title\n      ? (title + defaultSep + defaultTitle).substring(0, 60)\n      : defaultTitle;\n    const theDescription = description\n      ? description.substring(0, 155)\n      : defaultDescription;\n    // const theImage = image ? `${SITE_URL}${image}` : defaultImage;\n\n    const metaTags = [\n      { itemprop: \"name\", content: theTitle },\n      { itemprop: \"description\", content: theDescription },\n      // { itemprop: \"image\", content: theImage },\n      { name: \"description\", content: theDescription },\n      { name: \"twitter:card\", content: \"summary_large_image\" },\n      { name: \"twitter:site\", content: defaultTwitter },\n      { name: \"twitter:title\", content: theTitle },\n      { name: \"twitter:description\", content: theDescription },\n      { name: \"twitter:creator\", content: twitter || defaultTwitter },\n      // { name: \"twitter:image:src\", content: theImage },\n      { property: \"og:title\", content: theTitle },\n      { property: \"og:type\", content: contentType || \"website\" },\n      { property: \"og:url\", content: SITE_URL + pathname },\n      // { property: \"og:image\", content: theImage },\n      { property: \"og:description\", content: theDescription },\n      { property: \"og:site_name\", content: defaultTitle },\n      { property: \"fb:app_id\", content: FACEBOOK_APP_ID }\n    ];\n\n    if (noCrawl) {\n      metaTags.push({ name: \"robots\", content: \"noindex, nofollow\" });\n    }\n\n    if (published) {\n      metaTags.push({ name: \"article:published_time\", content: published });\n    }\n    if (updated) {\n      metaTags.push({ name: \"article:modified_time\", content: updated });\n    }\n    if (category) {\n      metaTags.push({ name: \"article:section\", content: category });\n    }\n    if (tags) {\n      metaTags.push({ name: \"article:tag\", content: tags });\n    }\n\n    return metaTags;\n  }\n\n  render() {\n    const { children, id, className, ...rest } = this.props;\n\n    return (\n      <main id={id} className={className}>\n        <Helmet\n          htmlAttributes={{\n            lang: \"en\",\n            itemscope: undefined,\n            itemtype: `https://schema.org/${rest.schema || \"WebPage\"}`\n          }}\n          title={\n            rest.title ? rest.title + defaultSep + defaultTitle : defaultTitle\n          }\n          link={[\n            {\n              rel: \"canonical\",\n              href: SITE_URL + this.props.location.pathname\n            }\n          ]}\n          meta={this.getMetaTags(rest, this.props.location.pathname)}\n        />\n        {children}\n      </main>\n    );\n  }\n}\n\nexport default withRouter(Page);\n"]},"metadata":{},"sourceType":"module"}