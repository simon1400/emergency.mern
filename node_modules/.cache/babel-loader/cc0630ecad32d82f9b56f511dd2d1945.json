{"ast":null,"code":"import _objectSpread from \"/Users/dmytropechunka/Desktop/main/projects/slavik/mern/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport Cookies from \"js-cookie\";\nimport axios from \"axios\";\nexport var AUTHENTICATE = \"auth/AUTHENTICATE\";\nexport var SET_CURRENT_USER = \"auth/SET_CURRENT_USER\";\nvar initialState = {\n  isAuthenticated: false,\n  currentUser: {}\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case AUTHENTICATE:\n      return _objectSpread({}, state, {\n        isAuthenticated: action.authenticated\n      });\n\n    case SET_CURRENT_USER:\n      return _objectSpread({}, state, {\n        currentUser: action.user\n      });\n\n    default:\n      return state;\n  }\n});\nexport var setCurrentUser = function setCurrentUser(user) {\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      dispatch({\n        type: SET_CURRENT_USER,\n        user: user\n      });\n      Cookies.set(\"user\", user);\n      dispatch({\n        type: AUTHENTICATE,\n        authenticated: true\n      });\n      resolve(user);\n    });\n  };\n};\nexport var establishCurrentUser = function establishCurrentUser() {\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      var userFromCookie = Cookies.getJSON(\"user\");\n\n      if (userFromCookie) {\n        dispatch(setCurrentUser(userFromCookie));\n        resolve(userFromCookie);\n      } else {\n        resolve({});\n      }\n    });\n  };\n};\nexport var loginUser = function loginUser(email, password) {\n  return function (dispatch) {\n    return axios.get(\"http://localhost:4000/admin/user/login/\" + email + \"/\" + password).then(function (res) {\n      dispatch(setCurrentUser(res.data));\n    });\n  };\n};\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      dispatch({\n        type: AUTHENTICATE,\n        authenticated: false\n      });\n      dispatch({\n        type: SET_CURRENT_USER,\n        user: {}\n      });\n      Cookies.remove(\"user\");\n      resolve({});\n    });\n  };\n};","map":{"version":3,"sources":["/Users/dmytropechunka/Desktop/main/projects/slavik/mern/src/modules/auth.js"],"names":["Cookies","axios","AUTHENTICATE","SET_CURRENT_USER","initialState","isAuthenticated","currentUser","state","action","type","authenticated","user","setCurrentUser","dispatch","Promise","resolve","set","establishCurrentUser","userFromCookie","getJSON","loginUser","email","password","get","then","res","data","logoutUser","remove"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,YAAY,GAAG,mBAArB;AACP,OAAO,IAAMC,gBAAgB,GAAG,uBAAzB;AAEP,IAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,KADE;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;AAKA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,YAAL;AACE,+BACKK,KADL;AAEEF,QAAAA,eAAe,EAAEG,MAAM,CAACE;AAF1B;;AAKF,SAAKP,gBAAL;AACE,+BACKI,KADL;AAEED,QAAAA,WAAW,EAAEE,MAAM,CAACG;AAFtB;;AAKF;AACE,aAAOJ,KAAP;AAdJ;AAgBD,CAjBD;AAmBA,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,IAAI;AAAA,SAAI,UAAAE,QAAQ;AAAA,WAC5C,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACrBF,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAEN,gBADC;AAEPQ,QAAAA,IAAI,EAAJA;AAFO,OAAD,CAAR;AAKAX,MAAAA,OAAO,CAACgB,GAAR,CAAY,MAAZ,EAAoBL,IAApB;AAEAE,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAEP,YADC;AAEPQ,QAAAA,aAAa,EAAE;AAFR,OAAD,CAAR;AAKAK,MAAAA,OAAO,CAACJ,IAAD,CAAP;AACD,KAdD,CAD4C;AAAA,GAAZ;AAAA,CAA3B;AAiBP,OAAO,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,SAAM,UAAAJ,QAAQ;AAAA,WAChD,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACrB,UAAIG,cAAc,GAAGlB,OAAO,CAACmB,OAAR,CAAgB,MAAhB,CAArB;;AAEA,UAAID,cAAJ,EAAoB;AAClBL,QAAAA,QAAQ,CAACD,cAAc,CAACM,cAAD,CAAf,CAAR;AACAH,QAAAA,OAAO,CAACG,cAAD,CAAP;AACD,OAHD,MAGO;AACLH,QAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,KATD,CADgD;AAAA,GAAd;AAAA,CAA7B;AAYP,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAqB,UAAAT,QAAQ,EAAI;AACxD,WAAOZ,KAAK,CACTsB,GADI,CACA,4CAA4CF,KAA5C,GAAoD,GAApD,GAA0DC,QAD1D,EAEJE,IAFI,CAEC,UAAAC,GAAG,EAAI;AACXZ,MAAAA,QAAQ,CAACD,cAAc,CAACa,GAAG,CAACC,IAAL,CAAf,CAAR;AACD,KAJI,CAAP;AAKD,GANwB;AAAA,CAAlB;AAQP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAd,QAAQ;AAAA,WACtC,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACrBF,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAEP,YADC;AAEPQ,QAAAA,aAAa,EAAE;AAFR,OAAD,CAAR;AAKAG,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAEN,gBADC;AAEPQ,QAAAA,IAAI,EAAE;AAFC,OAAD,CAAR;AAKAX,MAAAA,OAAO,CAAC4B,MAAR,CAAe,MAAf;AACAb,MAAAA,OAAO,CAAC,EAAD,CAAP;AACD,KAbD,CADsC;AAAA,GAAd;AAAA,CAAnB","sourcesContent":["import Cookies from \"js-cookie\";\nimport axios from \"axios\";\n\nexport const AUTHENTICATE = \"auth/AUTHENTICATE\";\nexport const SET_CURRENT_USER = \"auth/SET_CURRENT_USER\";\n\nconst initialState = {\n  isAuthenticated: false,\n  currentUser: {}\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case AUTHENTICATE:\n      return {\n        ...state,\n        isAuthenticated: action.authenticated\n      };\n\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: action.user\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setCurrentUser = user => dispatch =>\n  new Promise(resolve => {\n    dispatch({\n      type: SET_CURRENT_USER,\n      user\n    });\n\n    Cookies.set(\"user\", user);\n\n    dispatch({\n      type: AUTHENTICATE,\n      authenticated: true\n    });\n\n    resolve(user);\n  });\n\nexport const establishCurrentUser = () => dispatch =>\n  new Promise(resolve => {\n    let userFromCookie = Cookies.getJSON(\"user\");\n\n    if (userFromCookie) {\n      dispatch(setCurrentUser(userFromCookie));\n      resolve(userFromCookie);\n    } else {\n      resolve({});\n    }\n  });\n\nexport const loginUser = (email, password) => dispatch => {\n  return axios\n    .get(\"http://localhost:4000/admin/user/login/\" + email + \"/\" + password)\n    .then(res => {\n      dispatch(setCurrentUser(res.data));\n    });\n};\n\nexport const logoutUser = () => dispatch =>\n  new Promise(resolve => {\n    dispatch({\n      type: AUTHENTICATE,\n      authenticated: false\n    });\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      user: {}\n    });\n\n    Cookies.remove(\"user\");\n    resolve({});\n  });\n"]},"metadata":{},"sourceType":"module"}