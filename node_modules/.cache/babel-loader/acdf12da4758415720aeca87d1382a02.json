{"ast":null,"code":"var _jsxFileName = \"/Users/dmytropechunka/Desktop/main/projects/slavik/mern/src/index.js\";\nimport React from 'react';\nimport { render, hydrate } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport Loadable from 'react-loadable';\nimport { Frontload } from 'react-frontload';\nimport { ConnectedRouter } from 'connected-react-router';\nimport createStore from './store';\nimport App from './app/app';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker'; // Create a store and get back itself and its history object\n\nvar _createStore = createStore(),\n    store = _createStore.store,\n    history = _createStore.history; // Running locally, we should run on a <ConnectedRouter /> rather than on a <StaticRouter /> like on the server\n// Let's also let React Frontload explicitly know we're not rendering on the server here\n\n\nvar Application = React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, React.createElement(ConnectedRouter, {\n  history: history,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, React.createElement(Frontload, {\n  noServerRender: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}))));\nvar root = document.querySelector('#root');\n\nif (root.hasChildNodes() === true) {\n  // If it's an SSR, we use hydrate to get fast page loads by just\n  // attaching event listeners after the initial render\n  Loadable.preloadReady().then(function () {\n    hydrate(Application, root);\n  });\n} else {\n  // If we're not running on the server, just render like normal\n  render(Application, root);\n}","map":{"version":3,"sources":["/Users/dmytropechunka/Desktop/main/projects/slavik/mern/src/index.js"],"names":["React","render","hydrate","Provider","Loadable","Frontload","ConnectedRouter","createStore","App","serviceWorker","store","history","Application","root","document","querySelector","hasChildNodes","preloadReady","then"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,WAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,OAAOC,WAAP,MAAwB,SAAxB;AAEA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAO,aAAP;AAEA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;;mBAC2BF,WAAW,E;IAA9BG,K,gBAAAA,K;IAAOC,O,gBAAAA,O,EAEf;AACA;;;AACA,IAAMC,WAAW,GACf,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,eAAD;AAAiB,EAAA,OAAO,EAAEC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,SAAD;AAAW,EAAA,cAAc,EAAE,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF,CADF;AAUA,IAAME,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAb;;AAEA,IAAIF,IAAI,CAACG,aAAL,OAAyB,IAA7B,EAAmC;AACjC;AACA;AACAZ,EAAAA,QAAQ,CAACa,YAAT,GAAwBC,IAAxB,CAA6B,YAAM;AACjChB,IAAAA,OAAO,CAACU,WAAD,EAAcC,IAAd,CAAP;AACD,GAFD;AAGD,CAND,MAMO;AACL;AACAZ,EAAAA,MAAM,CAACW,WAAD,EAAcC,IAAd,CAAN;AACD","sourcesContent":["import React from 'react';\nimport { render, hydrate } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport Loadable from 'react-loadable';\nimport { Frontload } from 'react-frontload';\nimport { ConnectedRouter } from 'connected-react-router';\nimport createStore from './store';\n\nimport App from './app/app';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n// Create a store and get back itself and its history object\nconst { store, history } = createStore();\n\n// Running locally, we should run on a <ConnectedRouter /> rather than on a <StaticRouter /> like on the server\n// Let's also let React Frontload explicitly know we're not rendering on the server here\nconst Application = (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Frontload noServerRender={true}>\n        <App />\n      </Frontload>\n    </ConnectedRouter>\n  </Provider>\n);\n\nconst root = document.querySelector('#root');\n\nif (root.hasChildNodes() === true) {\n  // If it's an SSR, we use hydrate to get fast page loads by just\n  // attaching event listeners after the initial render\n  Loadable.preloadReady().then(() => {\n    hydrate(Application, root);\n  });\n} else {\n  // If we're not running on the server, just render like normal\n  render(Application, root);\n}\n"]},"metadata":{},"sourceType":"module"}