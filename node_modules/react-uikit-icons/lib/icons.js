
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactUikitBase = require('react-uikit-base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var icon = function icon(props) {

  // CSS classes
  var cssClassNames = _reactUikitBase.helpers.cleanClasses([props.link ? props.link.type === 'button' ? 'uk-icon-button' : 'uk-icon-hover' : null, props.spin ? 'uk-icon-spin' : null, props.justify ? 'uk-icon-justify' : null, props.icon ? 'uk-icon-' + props.icon : null, props.size ? 'uk-icon-' + props.size : null, props.classes, props.className]);

  // Remove non valid html attributes
  var ignoreProps = ['children', 'classes', 'icon', 'link', 'justify', 'kitid', 'spin', 'size'];

  var cleanProps = _reactUikitBase.helpers.cleanProps(ignoreProps)(props);

  var cleanLinkProps = function cleanLinkProps() {
    return props.link ? _reactUikitBase.helpers.cleanProps(ignoreProps)(props.link) : null;
  };

  var component = {
    icon: _react2.default.createElement('i', _extends({}, cleanProps, (0, _reactUikitBase.events)(props), {
      className: cssClassNames,
      'data-kitid': props.kitid
    })),

    link: _react2.default.createElement(
      'a',
      _extends({}, cleanLinkProps(), {
        'data-kitid': props.kitid
      }),
      _react2.default.createElement('i', _extends({}, cleanProps, (0, _reactUikitBase.events)(props), {
        className: cssClassNames

      }))
    )
  };

  // Return Component
  return props.link ? component.link : component.icon;
};

icon.propTypes = {
  children: _react2.default.PropTypes.any,
  className: _react2.default.PropTypes.string,
  classes: _react2.default.PropTypes.array,
  icon: _react2.default.PropTypes.string,
  link: _react2.default.PropTypes.object,
  justify: _react2.default.PropTypes.bool,
  kitid: _react2.default.PropTypes.string,
  spin: _react2.default.PropTypes.bool,
  size: _react2.default.PropTypes.oneOf(['small', 'medium', 'large'])
};

exports.default = (0, _reactUikitBase.base)(icon);